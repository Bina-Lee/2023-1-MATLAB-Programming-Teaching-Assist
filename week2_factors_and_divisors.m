%소인수 분해와 약수, 그리고 소수
%소인수 분해: factor
%2023을 소인수 분해하기 위해 factor() 함수를 사용합니다.
n = 2023;
k = factor(n)

% 소인수들을 모두 곱하면 원래 수가 나와야 되겠지요.
p = prod(k)

%인수 구하기: divisors()
%그렇다면 어떻게 모든 인수를 구할 수 있을까요?
%인수들은 원래 숫자를 나누었을 때 나머지가 0입니다.
%Matlab에서는 divisors()함수를 이용합니다.
d2023 = divisors(n)

%이번에는 2024의 인수들도 모두 구해보겠습니다.
d2024 = divisors(2024)

%합집합: uinon()
%그렇다면 2023의 인수이거나, 2024의 인수인 숫자들을 모구 구하면 어떻게 될까요?
%두 벡터 A와 B의 합집합 C는 다음과 같이 구할 수 있습니다.
A  = [2, 4];
B  = [2, 5, 9];
C1 = [A, B]

%그런데 2가 중복이 됩니다. 
%이럴때는 중복을 제거하여 최종적으로 C는 이렇게 구할 수 있습니다.
C = unique([A, B])
%이 과정을 한꺼번에 하는 명령은 union(A, B)입니다. 
union(A, B)

%이제 원래 문제로 돌아가 볼까요?
%2023과 2024의 약수를 모두 구하려면 다음과 같이 하면 될겁니다.
U = union(divisors(2023), divisors(2024))
%그 갯수는 length(U)로 쉽게 구할 수 있습니다.
nDivisors = length(U)

%교집합: intersect()
%교집은 intersect(a,b)로 구할 수 있는데요,
%예를 들어 6과 10의 약수를 모두 구하고 공약수를 구해보겠습니다.
a = divisors(6)
b = divisors(10)
c = intersect(a,b)

%공약수 가운데 가장 큰 공약수는 최대공약수라고 합니다.
%이 최대공약수를 한번에 구해주는 함수는 gcd(n,m)입니다.
gcd(6, 10)
%또한 최소 공배수는 lcm(n,m) 함수로 구할 수 있습니다. 
lcm(6,10)

%소수 입니까? : isprime(n)
%1과 자신만을 인수로 갖는 자연수를 소수라고 합니다.
%17은 소수입니다.
isprime(17)
%그렇지만 81은 소수가 아니지요.
isprime(81)
%여러 숫자들을 한꺼번에 검사할 수도 있습니다. 
%예를 들어 2~15사이의 소수는 2, 3, 5, 7, 11, 13 입니다. 
n = 2:15;
p = isprime(n);
[n; p]

%다른 소수 관련 함수들:  primes(n), nextprime(n)
%10보다 작거나 같은 소수들은 이렇게 구합니다.
primes(10)
%2023년 이후로 처음 소수인 해는 언제일까요?
nextprime(2023)

%복습하기
%다음 함수들을 어떻게 사용하는지 배웠어요.
%factor(2023): 2023을 소인수 분해
%prod([2, 4, 3]):주어진 배열의 곱을 계산, 
%divisors(2023): 2023의 인수 모두 구하기
%unique([2, 2, 4, 3, 4]): 중복을 제거하고 정렬
%union(a,b): a와 b의 합집합
%intersect(a,b): a와 b의  교집합
%gcd(6, 8): 6과 8의 최대공약수
%lcm(6, 8): 6과 8의 최소공배수
%isprime(2023): 2023이 소수니?
%nextprime(2023): 2023보다 크거나 같은 소수
%primes(2023): 2023보다 작거나 같은 모든 소수

%연습 문제
%2000년과 3000년 사이의 연도 가운데 소수인 연도의 갯수를 구하시오.
length(primes(3000))-length(primes(2000))
%2023년 이후 100번째로 소수인 해는 몇년도인가요?
nthprime(length(primes(2023))+100)
